services:
  postgres:
    image: pgvector/pgvector:pg16
    healthcheck:
      test: pg_isready -U $POSTGRES_USER
      start_interval: 1s
      start_period: 5s
      interval: 5s
      retries: 5
    ports:
      - "5433:5432"
    env_file:
      - .env
    volumes:
      # - ./postgres-volume:/var/lib/postgresql/data
      - postgres_data:/var/lib/postgresql/data  # 使用 Docker volume

  postgres-setup:
    # image: migrate/migrate
    build:   # 改用 Dockerfile 方式處理 migrations
      context: .
      dockerfile: Dockerfile.migration
    depends_on:
      postgres:
        condition: service_healthy
    # volumes:
        # - ./backend/migrations:/migrations
    env_file:
      - .env
    command: ["-path", "/migrations", "-database", "postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@postgres:$POSTGRES_PORT/$POSTGRES_DB?sslmode=disable", "up"]

  backend:
    container_name: opengpts-backend
    build:
      # context: backend  # 限制了只能訪問 backend 目錄
      context: .  # 可以訪問整個專案目錄
      dockerfile: Dockerfile.backend
    ports:
      - "8100:8000" # Backend is accessible on localhost:8100
    depends_on:
      postgres-setup:
        condition: service_completed_successfully
    env_file:
      - .env
    # volumes:
    #   - ./backend:/backend
    environment:
      POSTGRES_HOST: "postgres"
    command:
      - --reload

  frontend:
    container_name: opengpts-frontend
    build:
      # context: frontend
      context: .
      dockerfile: Dockerfile.frontend
    depends_on:
      backend:
        condition: service_healthy
    # volumes:
    #   - ./frontend/src:/frontend/src
    ports:
      - "5173:5173" # Frontend is accessible on localhost:5173
    environment:
      VITE_BACKEND_URL: "http://backend:8000"

volumes:
  postgres_data:  # 定義 Docker volume
